<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Deadlock Simulator</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    :root {
      --primary: #0d6efd;
      --bg: #121212;
      --text: #f0f0f0;
      --card: #1e1e1e;
      --accent: #28a745;
      --danger: #dc3545;
      --warning: #ffc107;
      --font: 'Segoe UI', sans-serif;
    }
    body {
      background-color: var(--bg);
      color: var(--text);
      font-family: var(--font);
      margin: 0;
      padding: 0;
    }
    .container {
      max-width: 800px;
      margin: 50px auto;
      background: var(--card);
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 0 25px rgba(0, 0, 0, 0.3);
    }
    h1 {
      text-align: center;
      color: var(--primary);
      margin-bottom: 20px;
    }
    label {
      display: block;
      margin-top: 15px;
      font-weight: bold;
    }
    textarea {
      width: 100%;
      padding: 12px;
      font-size: 15px;
      background: #2c2c2c;
      color: var(--text);
      border: 1px solid #444;
      border-radius: 6px;
      resize: vertical;
      margin-top: 5px;
    }
    button {
      margin-top: 20px;
      padding: 12px;
      font-size: 16px;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      transition: background 0.3s;
    }
    #detect-btn {
      background: var(--primary);
      width: 32%;
    }
    #banker-btn {
      background: var(--accent);
      width: 32%;
    }
    #waitfor-btn {
      background: var(--warning);
      width: 32%;
    }
    button:hover {
      opacity: 0.9;
    }
    #output {
      background: #212529;
      padding: 15px;
      margin-top: 25px;
      border-left: 4px solid var(--primary);
      font-size: 16px;
      white-space: pre-wrap;
      border-radius: 6px;
    }
    .btn-group {
      display: flex;
      gap: 2%;
    }
    .solution {
      background: #2d3748;
      padding: 10px;
      margin-top: 15px;
      border-left: 4px solid var(--accent);
      border-radius: 4px;
    }
    .solution-title {
      font-weight: bold;
      color: var(--accent);
      margin-bottom: 5px;
    }
    @media (max-width: 600px) {
      .btn-group {
        flex-direction: column;
      }
      button {
        width: 100%;
        margin-bottom: 10px;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>ðŸš¦ Deadlock Detection & Prevention Simulator</h1>

    <label>Processes (e.g., 0,1,2):</label>
    <textarea id="processes">0,1</textarea>

    <label>Allocation Matrix (e.g., 0 1; 1 0):</label>
    <textarea id="allocations">1 0; 0 1</textarea>

    <label>Request Matrix (e.g., 0 1; 1 0):</label>
    <textarea id="requests">0 1; 1 0</textarea>

    <label>Available Resources (e.g., 0 0):</label>
    <textarea id="available">0 0</textarea>

    <label>Max Demand Matrix (e.g., 1 1; 1 1):</label>
    <textarea id="max">1 1; 1 1</textarea>

    <div class="btn-group">
      <button id="detect-btn" onclick="detectDeadlock()">Detect Deadlock</button>
      <button id="banker-btn" onclick="runBanker()">Banker's Algorithm</button>
      <button id="waitfor-btn" onclick="detectWaitFor()">Wait-for Graph</button>
    </div>

    <div id="output">Output will appear here...</div>
  </div>

  <script>
    function parseMatrix(input) {
      if (!input.trim()) return [];
      return input.trim().split(";").map(row => row.trim().split(/\s+/).map(Number));
    }

    function parseList(input) {
      if (!input.trim()) return [];
      return input.trim().split(",").map(x => x.trim()).filter(x => x !== "").map(Number);
    }

    function addSolution(title, content) {
      const output = document.getElementById("output");
      const solutionDiv = document.createElement("div");
      solutionDiv.className = "solution";
      solutionDiv.innerHTML = `
        <div class="solution-title">${title}</div>
        <div>${content}</div>
      `;
      output.appendChild(solutionDiv);
    }

    function detectDeadlock() {
      try {
        const alloc = parseMatrix(document.getElementById('allocations').value);
        const req = parseMatrix(document.getElementById('requests').value);
        const avail = document.getElementById('available').value.trim().split(/\s+/).map(Number);
        const processes = parseList(document.getElementById('processes').value);

        if (alloc.length === 0 || req.length === 0 || avail.length === 0 || processes.length === 0) {
          throw new Error("Please fill in all required fields");
        }

        if (alloc.length !== req.length || alloc.length !== processes.length) {
          throw new Error("Allocation, Request matrices and Processes must have same number of processes");
        }

        const n = alloc.length;
        const m = avail.length;
        let work = [...avail];
        const finish = Array(n).fill(false);
        const safeSeq = [];

        // First pass - find processes that can finish immediately
        for (let i = 0; i < n; i++) {
          if (req[i].every(r => r === 0)) {
            finish[i] = true;
            safeSeq.push(i);
            for (let j = 0; j < m; j++) work[j] += alloc[i][j];
          }
        }

        // Subsequent passes
        let changed = true;
        while (changed) {
          changed = false;
          for (let i = 0; i < n; i++) {
            if (!finish[i] && req[i].every((r, j) => r <= work[j])) {
              for (let j = 0; j < m; j++) work[j] += alloc[i][j];
              finish[i] = true;
              safeSeq.push(i);
              changed = true;
            }
          }
        }

        const deadlocked = finish.some(done => !done);
        const output = document.getElementById("output");
        output.innerHTML = deadlocked
          ? "Deadlock Detected! (Processes: " +
            finish.map((f, i) => f ? "" : i).filter(x => x !== "").join(", ") + ")"
          : "No Deadlock Detected (Safe State).\n\nSafe Sequence: " + safeSeq.join(" â†’ ");

        if (deadlocked) {
          addSolution("ðŸ’¡ Prevention Tips", `
            1. Terminate one or more deadlocked processes<br>
            2. Add more resources to the system<br>
            3. Rollback processes to a safe state<br>
            4. Use resource ordering or timeouts
          `);
        }
      } catch (e) {
        document.getElementById("output").innerText = "Error: " + e.message;
      }
    }

    function runBanker() {
      try {
        const available = document.getElementById('available').value.trim().split(/\s+/).map(Number);
        const max = parseMatrix(document.getElementById('max').value);
        const alloc = parseMatrix(document.getElementById('allocations').value);
        const processes = parseList(document.getElementById('processes').value);

        if (available.length === 0 || max.length === 0 || alloc.length === 0 || processes.length === 0) {
          throw new Error("Please fill in all required fields");
        }

        if (max.length !== alloc.length || max.length !== processes.length) {
          throw new Error("Max, Allocation matrices and Processes must have same number of processes");
        }

        const n = max.length;
        const m = available.length;
        const need = Array.from({ length: n }, (_, i) => 
          max[i].map((x, j) => x - alloc[i][j]));
        
        // Validate that allocation doesn't exceed max
        for (let i = 0; i < n; i++) {
          for (let j = 0; j < m; j++) {
            if (need[i][j] < 0) {
              throw new Error(`Process ${i} has allocation exceeding max for resource ${j}`);
            }
          }
        }

        const work = [...available];
        const finish = Array(n).fill(false);
        const safeSeq = [];

        let changed = true;
        while (changed) {
          changed = false;
          for (let i = 0; i < n; i++) {
            if (!finish[i] && need[i].every((v, j) => v <= work[j])) {
              for (let j = 0; j < m; j++) work[j] += alloc[i][j];
              finish[i] = true;
              safeSeq.push(i);
              changed = true;
            }
          }
        }

        const output = document.getElementById('output');
        output.innerHTML = "";

        if (safeSeq.length === n) {
          output.innerHTML =
            "Safe State! No Deadlock Detected.\n\nSafe Sequence:\nâ†’ " + safeSeq.join(" â†’ ");
        } else {
          output.innerHTML =
            "Unsafe State! Deadlock Possible.\n\nBlocked Processes: " +
            finish.map((f, i) => f ? "" : i).filter(x => x !== "").join(", ") +
            "\n\nNeed Matrix:\n" + need.map(row => row.join(" ")).join("\n");
          addSolution("ðŸ’¡ Prevention Tips", `
            1. Add more resources<br>
            2. Reduce resource requests<br>
            3. Implement resource quotas<br>
            4. Use Banker's algorithm
          `);
        }
      } catch (e) {
        document.getElementById('output').innerText = "Error: " + e.message;
      }
    }

    function detectWaitFor() {
      try {
        const alloc = parseMatrix(document.getElementById('allocations').value);
        const req = parseMatrix(document.getElementById('requests').value);
        const avail = document.getElementById('available').value.trim().split(/\s+/).map(Number);
        const processes = parseList(document.getElementById('processes').value);

        if (alloc.length === 0 || req.length === 0 || avail.length === 0 || processes.length === 0) {
          throw new Error("Please fill in all required fields");
        }

        if (alloc.length !== req.length || alloc.length !== processes.length) {
          throw new Error("Allocation, Request matrices and Processes must have same number of processes");
        }

        const n = alloc.length;
        const m = avail.length;
        
        // Calculate which processes are currently blocked
        const blocked = [];
        for (let i = 0; i < n; i++) {
          let canProceed = true;
          for (let j = 0; j < m; j++) {
            if (req[i][j] > avail[j]) {
              canProceed = false;
              break;
            }
          }
          if (!canProceed) blocked.push(i);
        }

        // Build wait-for graph
        const graph = {};
        processes.forEach(p => graph[p] = []);
        for (let i of blocked) {
          for (let j = 0; j < n; j++) {
            if (i === j) continue;
            for (let k = 0; k < m; k++) {
              if (req[i][k] > 0 && alloc[j][k] > 0) {
                graph[processes[i]].push(processes[j]);
                break;
              }
            }
          }
        }

        // Detect cycle in wait-for graph
        const visited = new Set();
        const recStack = new Set();
        let cycle = null;

        function hasCycle(node, path) {
          if (recStack.has(node)) {
            cycle = [...path.slice(path.indexOf(node)), node];
            return true;
          }
          if (visited.has(node)) return false;

          visited.add(node);
          recStack.add(node);
          path.push(node);

          for (const neighbor of graph[node]) {
            if (hasCycle(neighbor, path)) return true;
          }

          recStack.delete(node);
          path.pop();
          return false;
        }

        let deadlockFound = false;
        const deadlockedProcesses = new Set();

        for (const node of processes) {
          if (!visited.has(node) && hasCycle(node, [])) {
            deadlockFound = true;
            cycle.forEach(p => deadlockedProcesses.add(p));
          }
        }

        const output = document.getElementById('output');
        output.innerHTML = "";

        if (deadlockFound) {
          output.innerHTML =
            `Deadlock Detected in Wait-for Graph!\n\n` +
            `Cycle Found: ${Array.from(deadlockedProcesses).join(" â†’ ")}\n\n` +
            `Wait-for Graph:\n${JSON.stringify(graph, null, 2)}`;
          addSolution("ðŸ’¡ Prevention Tips", `
            1. Terminate one process in cycle<br>
            2. Use resource ordering<br>
            3. Add timeouts<br>
            4. Monitor regularly
          `);
        } else {
          output.innerHTML =
            `No Deadlock in Wait-for Graph\n\n` +
            `Wait-for Graph:\n${JSON.stringify(graph, null, 2)}`;
        }
      } catch (e) {
        document.getElementById('output').innerText = "Error: " + e.message;
      }
    }
  </script>
</body>
</html>
